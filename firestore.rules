rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions for authentication and authorization
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }
    
    function isAdmin() {
      return isAuthenticated() && getUserRole() == 'admin';
    }
    
    function isOperationsManager() {
      return isAuthenticated() && getUserRole() == 'operations_manager';
    }
    
    function isSupervisor() {
      return isAuthenticated() && getUserRole() == 'supervisor';
    }
    
    function isViewer() {
      return isAuthenticated() && getUserRole() == 'viewer';
    }
    
    function hasRole(role) {
      return isAuthenticated() && getUserRole() == role;
    }
    
    function canRead() {
      return isAuthenticated(); // All authenticated users can read
    }
    
    function canWrite() {
      return isAdmin() || isOperationsManager() || isSupervisor(); // Admin, operations manager, and supervisor can write
    }
    
    function canDelete() {
      return isAdmin(); // Only admin can delete
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Users collection - user profiles and roles
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin() || isOwner(userId);
      allow delete: if isAdmin();
    }
    
    // Companies collection
    match /companies/{companyId} {
      allow read: if canRead();
      allow create: if canWrite();
      allow update: if canWrite();
      allow delete: if canDelete();
    }
    
    // Contracts collection
    match /contracts/{contractId} {
      allow read: if canRead();
      allow create: if canWrite();
      allow update: if canWrite();
      allow delete: if canDelete();
    }
    
    // Branches collection
    match /branches/{branchId} {
      allow read: if canRead();
      allow create: if canWrite();
      allow update: if canWrite();
      allow delete: if canDelete();
    }
    
    // Visits collection
    match /visits/{visitId} {
      allow read: if canRead();
      allow create: if canWrite();
      allow update: if canWrite() || (isViewer() && isOwner(resource.data.createdBy));
      allow delete: if canDelete();
    }
    
    // Invitations collection
    match /invitations/{invitationId} {
      allow read: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
    
    // File metadata collection (for Firebase Storage file tracking)
    match /files/{fileId} {
      allow read: if canRead();
      allow create: if canWrite();
      allow update: if canWrite() || isOwner(resource.data.uploadedBy);
      allow delete: if canDelete() || isOwner(resource.data.uploadedBy);
    }
    
    // Activity logs collection (for audit trail)
    match /activity_logs/{logId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated(); // All users can create logs
      allow update: if false; // Logs should be immutable
      allow delete: if false; // Logs should never be deleted
    }
    
    // System settings collection
    match /settings/{settingId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
      allow delete: if false; // Settings should not be deleted
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && (
        isAdmin() || 
        resource.data.userId == request.auth.uid
      );
      allow create: if canWrite();
      allow update: if isAuthenticated() && (
        isAdmin() || 
        resource.data.userId == request.auth.uid
      );
      allow delete: if isAdmin();
    }
    
    // Reports collection (for generated reports)
    match /reports/{reportId} {
      allow read: if canRead();
      allow create: if canWrite();
      allow update: if canWrite();
      allow delete: if canDelete();
    }
    
    // Backup/export data (for system maintenance)
    match /backups/{backupId} {
      allow read: if isAdmin();
      allow create: if isAdmin();
      allow update: if false; // Backups should be immutable
      allow delete: if isAdmin();
    }
    
    // Temporary data (for imports, processing, etc.)
    match /temp/{tempId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated();
    }
    
    // Deny all other paths
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
