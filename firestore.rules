rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function getUserRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    function hasRole(role) {
      return getUserRole() == role;
    }

    function hasMinRole(role) {
      let userRole = getUserRole();
      return (role == 'viewer' && userRole in ['viewer', 'supervisor', 'admin']) ||
             (role == 'supervisor' && userRole in ['supervisor', 'admin']) ||
             (role == 'admin' && userRole == 'admin');
    }

    // Users collection - users can read/write their own profile, admins can manage all
    match /users/{userId} {
      allow read: if isAuthenticated() && (userId == request.auth.uid || hasMinRole('admin'));
      allow write: if isAuthenticated() && (userId == request.auth.uid || hasMinRole('admin'));
    }

    // Companies collection - Temporarily relaxed for testing
    match /companies/{companyId} {
      allow read, write: if isAuthenticated();
    }

    // Contracts collection
    match /contracts/{contractId} {
      allow read: if isAuthenticated() && hasMinRole('viewer');
      allow write: if isAuthenticated() && hasMinRole('supervisor');
    }

    // Branches collection
    match /branches/{branchId} {
      allow read: if isAuthenticated() && hasMinRole('viewer');
      allow write: if isAuthenticated() && hasMinRole('supervisor');
    }

    // Visits collection - viewers can update visit results
    match /visits/{visitId} {
      allow read: if isAuthenticated() && hasMinRole('viewer');
      allow write: if isAuthenticated() && hasMinRole('supervisor');
      allow update: if isAuthenticated() && hasMinRole('viewer') &&
                   onlyUpdatingFields(['status', 'completedDate', 'completedTime', 'results', 'photos', 'notes']);
    }

    // Invitations collection - admin only
    match /invitations/{invitationId} {
      allow read, write: if isAuthenticated() && hasMinRole('admin');
    }

    // Helper function to check which fields are being updated
    function onlyUpdatingFields(allowedFields) {
      let affectedKeys = request.resource.data.diff(resource.data).affectedKeys();
      return affectedKeys.hasOnly(allowedFields.toSet());
    }

    // Temporary: Allow unauthenticated read access for testing
    match /test/{document} {
      allow read, write: if true;
    }

    // Temporary: Easier access for initial setup (remove in production)
    match /users/{userId} {
      allow read, write: if true;
    }
  }
}
